[HttpPost("/api/upload")]
        public IActionResult Upload(int id,[FromBody]Files uploadedFiles)
        {
            var allowed = new[] { "pdf","docx","doc"};
            
            if(uploadedFiles.Doc1!=null)
            if (!CheckFile(uploadedFiles.Doc1, allowed))
            {
                return BadRequest( new { status = 400 , message = "Invalid File Format Doc1"});
            }
            if(uploadedFiles.Doc2!=null)
            if (!CheckFile(uploadedFiles.Doc2, allowed))
            {
                return BadRequest(new { status = 400, message = "Invalid File Format Doc2" });
            }
            if(uploadedFiles.Docs!=null)
            foreach(var item in uploadedFiles.Docs)
            {
                 if(item!=null)
                if (!CheckFile(item,allowed))
                {
                    return BadRequest(new { status = 400, message = "Invalid File Format Doc2" });
                }
            }
            string uploadsFolder = hostingEnvironment.ContentRootPath;
            uploadsFolder = Path.Combine(uploadsFolder, "Files");
            uploadsFolder = uploadsFolder + "\\user" + id;
            Directory.CreateDirectory(uploadsFolder);
            if(uploadedFiles.Doc1!=null)
            storefile(uploadedFiles.Doc1,uploadsFolder);
            if(uploadedFiles.Doc2!=null)
            storefile(uploadedFiles.Doc2,uploadsFolder);
            string path = uploadsFolder + "\\Details";
            Directory.CreateDirectory(path);
            if(uploadedFiles.Docs!=null)
            foreach (var item in uploadedFiles.Docs)
            {
                storefile(item,path);
            }
            return Ok("Created");
        }


        public void storefile(string filestring,string uploadsFolder)
        {
            var Docparts = filestring.Split(',').ToList<string>();
            var bytes = Convert.FromBase64String(Docparts[1]);
            if (bytes.Length > 0)
            {
                string uniqueFileName = null;
                uniqueFileName = Guid.NewGuid().ToString()+"."+GetExtensionOfFile(filestring);
                string filepath = Path.Combine(uploadsFolder, uniqueFileName);
                using (var stream = new FileStream(filepath, FileMode.Create))
                {
                    stream.Write(bytes, 0, bytes.Length);
                    stream.Flush();
                }
            }
        }

        public bool CheckFile(string filestring,string[] extens)
        {
            var Docparts = filestring.Split(',').ToList<string>();
            if (Convert.FromBase64String(Docparts[1]).Length <= 0)
            {
                return false;
            }
            if (GetOriginalLengthInBytes(filestring) > (2 * 1024 * 1024))
            {
                return false;
            }
            else if (!extens.Contains(GetExtensionOfFile(filestring)))
            {
                return false;
            }
            else
               return true;
        }

        public int GetOriginalLengthInBytes(string base64string)
        {
            if (string.IsNullOrEmpty(base64string)) { return 0; }

            var characterCount = base64string.Length;
            var paddingCount = base64string.Substring(characterCount - 2, 2)
                                           .Count(c => c == '=');
            return (3 * (characterCount / 4)) - paddingCount;
        }

        public string GetExtensionOfFile(string filestring)
        {
            int extentionStartIndex = filestring.IndexOf('/');
            int extensionEndIndex = filestring.IndexOf(';');
            int filetypeStartIndex = filestring.IndexOf(':');

            String fileType = filestring.Substring(filetypeStartIndex + 1, extentionStartIndex);
            String fileExtension = filestring.Substring(extentionStartIndex + 1, extensionEndIndex-extentionStartIndex-1);
            return fileExtension;
        }